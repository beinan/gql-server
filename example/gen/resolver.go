//Generated by gql-server
//DO NOT EDIT
package gen

import (
	"github.com/beinan/gql-server/concurrent/future"
	. "github.com/beinan/gql-server/resolver"
)

type UserResolver interface {
	Id() IDResolver

	Name() StringResolver

	Email() StringResolver

	Friends(ctx Context, start int64, pageSize int64) []UserResolver
}

type FutureUserResolver struct {
	Value future.Future // future of User
}

func (this FutureUserResolver) Id() IDResolver {

	return this.Value.Then(func(value Value) (Value, error) {
		data := value.(User)
		return data.Id, nil
	})

}

func (this FutureUserResolver) Name() StringResolver {

	return this.Value.Then(func(value Value) (Value, error) {
		data := value.(User)
		return data.Name, nil
	})

}

func (this FutureUserResolver) Email() StringResolver {

	return this.Value.Then(func(value Value) (Value, error) {
		data := value.(User)
		return data.Email, nil
	})

}

func (this FutureUserResolver) Friends(ctx Context, start int64, pageSize int64) []UserResolver {

	panic("friends not implemented")

}

type QueryResolver interface {
	GetUser(ctx Context, id ID) UserResolver

	GetUsers(ctx Context, start int64, pageSize int64) []UserResolver
}

type FutureQueryResolver struct {
	Value future.Future // future of Query
}

func (this FutureQueryResolver) GetUser(ctx Context, id ID) UserResolver {

	panic("getUser not implemented")

}

func (this FutureQueryResolver) GetUsers(ctx Context, start int64, pageSize int64) []UserResolver {

	panic("getUsers not implemented")

}

type MutationResolver interface {
	UpdateUserName(ctx Context, id ID, name string) UserResolver

	UpdateUser(ctx Context, id ID, userInput UserInput) UserResolver
}

type FutureMutationResolver struct {
	Value future.Future // future of Mutation
}

func (this FutureMutationResolver) UpdateUserName(ctx Context, id ID, name string) UserResolver {

	panic("updateUserName not implemented")

}

func (this FutureMutationResolver) UpdateUser(ctx Context, id ID, userInput UserInput) UserResolver {

	panic("updateUser not implemented")

}
